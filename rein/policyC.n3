@prefix rdf:  <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix owl:  <http://www.w3.org/2002/07/owl#> .
@prefix log: <http://www.w3.org/2000/10/swap/log#> .
@prefix math: <http://www.w3.org/2000/10/swap/math#>.
@prefix foaf: <http://xmlns.com/foaf/0.1/>.
@prefix rein: <rein.n3#>.
@prefix reinc: <reinC.n3#>.
@prefix ont: <ontC.n3#>.
@prefix reind: <reinD.n3#>.
@prefix ontd: <ontD.n3#>.
@prefix : <#>.

<>  rein:usesOntology <reinC.n3>.
<> owl:imports <policyE.n3>.

# any guest who is known by the deployer of
# resourceZ is permitted to see all pics of the SecondMeeting
@forAll :guest, :deployer, :F, :G, :pic.
{  :guest a ont:Guest.
   <resourceZ.n3> log:semantics :F.
   :F log:includes {<resourceZ.n3> <resourceZ.n3#deployed> :deployer}.
   :deployer  log:semantics :G.
   :G log:includes  { [] a foaf:Person; foaf:knows [ a foaf:Person; rdfs:seeAlso :guest] }.
   ont:SecondMeeting ont:pic :pic.
} => { :guest reinc:canAccess :pic }.


# any guest who is  not known by the deployer of
# resourceZ is not permitted to see any pics
@forAll :guest, :deployer, :person, :F, :G.
{  :guest a ont:Guest.
   <resourceZ.n3> log:semantics :F.
   :F log:includes {<resourceZ.n3> <resourceZ.n3#deployed> :deployer}.
   :deployer log:semantics :G.
   :G log:notIncludes  { [ a foaf:Person; foaf:knows [ a foaf:Person; rdfs:seeAlso :guest ] ] }.
   :pic a ont:Picture.
} => { :guest reinc:cannotAccess :pic }.


# using the results of another policy
# if a member x is permitted (by policyD) to execute ontd:File2
# then x is permitted to view pics of FirstMeeting
@forAll :x.
{  :x a ont:Member.
   # create a request object for using with engine.n3
   ( {[] a rein:Request; rein:requester :x;
         rein:requestedAction ontd:File2; rein:requestType reind:execute}
     <engine.n3>.log:semantics) log:conjunction :F.
   :F log:conclusion :G.
   :G log:includes {:x reind:execute ontd:File2}.
   ont:FirstMeeting ont:pic :pic.
} => { :x reinc:canAccess :pic }.


