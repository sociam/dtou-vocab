# USAGE :  cwm --n3 requestA.n3 engine.n3 --think --filter="engine.n3"

@prefix rdf:  <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix owl:  <http://www.w3.org/2002/07/owl#> .
@prefix log:  <http://www.w3.org/2000/10/swap/log#> .
@prefix math: <http://www.w3.org/2000/10/swap/math#>.
@prefix rein: <rein.n3#>.
@prefix reina: <reinA.n3#>.
@prefix ont: <ontA.n3#>.
@prefix : <#> .

#############################
## SETTING UP FORMULAE     ##
#############################

@forAll :request, :actor, :deontic, :action, :policy, :ontology, :F, :G.
{   :request a rein:Request.
    :request rein:requestedAction :action.
    :request rein:requester :actor.
    :request rein:requestType :deontic.
    :action.log:semantics log:includes { :action rein:controlledBy :policy }.
    :policy.log:semantics log:includes { :policy rein:usesOntology :ontology }.
    :ontology.log:semantics log:includes {:ontology rein:hasReasoner <> }.
    ( :policy.log:semantics
      :ontology.log:semantics
      :action.log:semantics
      :actor.log:semantics
      :deontic.log:semantics
      <rules-owl.n3>.log:semantics) log:conjunction :F.
    :F log:conclusion :G.
} => { :F :gives :G }.

{   :F :gives :G. 
    :G log:includes {:x a ont:Manager} 
} => {:x a :Manager}.

#####################
## USING MODALITY  ##
#####################
@forAll :request, :action, :actor, :F, :G.
# if ispermitted and not isprohibited, then ispermitted
{   :request rein:requestedAction :action.
    :request rein:requester :actor.
    :F :gives :G.
    :G log:includes {:actor reina:ispermitted :action}. 
    :G log:notIncludes {:actor reina:isprohibited :action}. 
} => {:actor reina:ispermitted :action}.

# if not ispermitted and isprohibited, then isprohibited
{   :request rein:requestedAction :action.
    :request rein:requester :actor.
    :F :gives :G.
    :G log:notIncludes {:actor reina:ispermitted :action}. 
    :G log:includes {:actor reina:isprohibited :action}. 
} => {:actor reina:isprohibited :action}.

# if neither ispermitted or isprohibited, then isprohibited
{   :request rein:requestedAction :action.
    :request rein:requester :actor.
    :F :gives :G.
    :G log:notIncludes {:actor reina:ispermitted :action}. 
    :G log:notIncludes {:actor reina:isprohibited :action}. 
} => {:actor reina:isprohibited :action}.

# if both ispermitted and isprohibited and PositiveMod, then ispermitted
{   :request rein:requestedAction :action.
    :request rein:requester :actor.
    :F :gives :G.
    :G log:includes {:actor reina:ispermitted :action}. 
    :G log:includes {:actor reina:isprohibited :action}. 
    :G log:includes {:p a reina:Policy; reina:modalitydef reina:PositiveMod}. 
} => {:actor reina:ispermitted :action}.

# if both ispermitted and isprohibited and NegativeMod, then isprohibited
{   :request rein:requestedAction :action.
    :request rein:requester :actor.
    :F :gives :G.
    :G log:includes {:actor reina:ispermitted :action}. 
    :G log:includes {:actor reina:isprohibited :action}. 
    :G log:includes {:p a reina:Policy; reina:modalitydef reina:NegativeMod}. 
} => {:actor reina:isprohibited :action}.

# if both ispermitted and isprohibited and no modality, then isprohibited
{   :request rein:requestedAction :action.
    :request rein:requester :actor.
    :F :gives :G.
    :G log:includes {:actor reina:ispermitted :action}. 
    :G log:includes {:actor reina:isprohibited :action}. 
    :G log:includes {:p a reina:Policy}. 
    :G log:notIncludes {:p reina:modalitydef []}. 
} => {:actor reina:isprohibited :action}.


#end
